plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'nu.studer.jooq' version '4.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.0'

    implementation 'io.vavr:vavr:0.9.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.4'
    testImplementation 'com.h2database:h2:2.1.210'

    implementation 'org.postgresql:postgresql:42.3.3'

    testImplementation 'org.mockito:mockito-core:4.4.0'

    implementation 'org.jooq:jooq-codegen:3.9.2'
    implementation 'org.springframework.boot:spring-boot-starter-jooq:2.3.0.RELEASE'

    jooqRuntime 'org.postgresql:postgresql:42.2.14'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jooq {
    version = '3.13.3'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = true
    chess_challenge(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/postgres'
            user = 'chess_challenge'
            password = 'chess_challenge'
            properties {
            }
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                // ...
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'INET'
                    }
                }
                // ...
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                // ...
            }
            target {
                packageName = 'com.chess_challenge.java_1.statistics.repositories.jooq.db'
                directory = 'src/main/java'
            }
        }
    }
}
