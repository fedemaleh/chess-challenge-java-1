/*
 * This file is generated by jOOQ.
 */
package com.chess_challenge.java_1.statistics.repositories.jooq.db.tables;


import com.chess_challenge.java_1.statistics.repositories.jooq.db.Keys;
import com.chess_challenge.java_1.statistics.repositories.jooq.db.Public;
import com.chess_challenge.java_1.statistics.repositories.jooq.db.tables.records.PiecesQueryBuilderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PiecesQueryBuilder extends TableImpl<PiecesQueryBuilderRecord> {

    private static final long serialVersionUID = -417579139;

    /**
     * The reference instance of <code>public.pieces_query_builder</code>
     */
    public static final PiecesQueryBuilder PIECES_QUERY_BUILDER = new PiecesQueryBuilder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PiecesQueryBuilderRecord> getRecordType() {
        return PiecesQueryBuilderRecord.class;
    }

    /**
     * The column <code>public.pieces_query_builder.piece</code>.
     */
    public final TableField<PiecesQueryBuilderRecord, String> PIECE = createField(DSL.name("piece"), org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false), this, "");

    /**
     * The column <code>public.pieces_query_builder.matches</code>.
     */
    public final TableField<PiecesQueryBuilderRecord, Integer> MATCHES = createField(DSL.name("matches"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.pieces_query_builder</code> table reference
     */
    public PiecesQueryBuilder() {
        this(DSL.name("pieces_query_builder"), null);
    }

    /**
     * Create an aliased <code>public.pieces_query_builder</code> table reference
     */
    public PiecesQueryBuilder(String alias) {
        this(DSL.name(alias), PIECES_QUERY_BUILDER);
    }

    /**
     * Create an aliased <code>public.pieces_query_builder</code> table reference
     */
    public PiecesQueryBuilder(Name alias) {
        this(alias, PIECES_QUERY_BUILDER);
    }

    private PiecesQueryBuilder(Name alias, Table<PiecesQueryBuilderRecord> aliased) {
        this(alias, aliased, null);
    }

    private PiecesQueryBuilder(Name alias, Table<PiecesQueryBuilderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PiecesQueryBuilder(Table<O> child, ForeignKey<O, PiecesQueryBuilderRecord> key) {
        super(child, key, PIECES_QUERY_BUILDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PiecesQueryBuilderRecord> getPrimaryKey() {
        return Keys.PIECES_QUERY_BUILDER_PK;
    }

    @Override
    public List<UniqueKey<PiecesQueryBuilderRecord>> getKeys() {
        return Arrays.<UniqueKey<PiecesQueryBuilderRecord>>asList(Keys.PIECES_QUERY_BUILDER_PK);
    }

    @Override
    public List<Check<PiecesQueryBuilderRecord>> getChecks() {
        return Arrays.<Check<PiecesQueryBuilderRecord>>asList(
              Internal.createCheck(this, DSL.name("pieces_query_builder_piece_check"), "(((piece)::text = ANY ((ARRAY['bishop'::character varying, 'knight'::character varying, 'pawn'::character varying, 'queen'::character varying, 'rook'::character varying])::text[])))", true)
        );
    }

    @Override
    public PiecesQueryBuilder as(String alias) {
        return new PiecesQueryBuilder(DSL.name(alias), this);
    }

    @Override
    public PiecesQueryBuilder as(Name alias) {
        return new PiecesQueryBuilder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PiecesQueryBuilder rename(String name) {
        return new PiecesQueryBuilder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PiecesQueryBuilder rename(Name name) {
        return new PiecesQueryBuilder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
